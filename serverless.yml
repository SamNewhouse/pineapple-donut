service: pineapple-donut

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_PLAYERS: Players
    DYNAMODB_ITEMS: Items
    DYNAMODB_COLLECTABLES: Collectables
    DYNAMODB_TRADES: Trades
    JWT_SECRET: ${env:JWT_SECRET, 'dev-secret-change-in-production'}
    DYNAMODB_ENDPOINT: ${env:DYNAMODB_ENDPOINT, ''}
    STAGE: ${self:provider.stage}

package:
  individually: true
  patterns:
    - "!src/scripts/**"

plugins:
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:
  # Player Management
  player--get:
    handler: src/handlers/players/get.handler
    events:
      - http:
          path: player/{id}
          method: get
          cors: true

  player--update:
    handler: src/handlers/players/update.handler
    events:
      - http:
          path: player/{id}/update/{field}
          method: post
          cors: true

  # Authentication
  signup--process:
    handler: src/handlers/signup/process.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors: true

  login--process:
    handler: src/handlers/login/process.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  # Scan
  scan--process:
    handler: src/handlers/scan/process.handler
    events:
      - http:
          path: scan/process
          method: post
          cors: true

  # Items
  items--get:
    handler: src/handlers/items/get.handler
    events:
      - http:
          path: item/{itemId}
          method: get
          cors: true

  items--getall:
    handler: src/handlers/items/getAll.handler
    events:
      - http:
          path: player/{playerId}/items
          method: get
          cors: true

  # Rarities
  rarities--getall:
    handler: src/handlers/rarities/get.handler
    events:
      - http:
          path: rarities
          method: get
          cors: true

  # Collectables
  collectables--getall:
    handler: src/handlers/collectables/getAll.handler
    events:
      - http:
          path: collectables
          method: get
          cors: true

  # Trades
  trades--get:
    handler: src/handlers/trades/get.handler
    events:
      - http:
          path: trade/{tradeId}
          method: get
          cors: true

  trades--getall:
    handler: src/handlers/trades/getAll.handler
    events:
      - http:
          path: player/{playerId}/trades
          method: get
          cors: true

  trades--create:
    handler: src/handlers/trades/create.handler
    events:
      - http:
          path: trade/create
          method: post
          cors: true

  trades--accept:
    handler: src/handlers/trades/accept.handler
    events:
      - http:
          path: trade/{tradeId}/accept
          method: post
          cors: true

  trades--reject:
    handler: src/handlers/trades/reject.handler
    events:
      - http:
          path: trade/{tradeId}/reject
          method: post
          cors: true

  trades--cancel:
    handler: src/handlers/trades/cancel.handler
    events:
      - http:
          path: trade/{tradeId}/cancel
          method: post
          cors: true

resources:
  Resources:
    # Collectables Table
    CollectablesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Collectables
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # Rarities Table
    RaritiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Rarities
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # Players Table
    PlayersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Players
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Items Table
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Items
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: playerId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: PlayerIndex
            KeySchema:
              - AttributeName: playerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Trades Table
    TradesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Trades
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: fromPlayerId
            AttributeType: S
          - AttributeName: toPlayerId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: FromPlayerIndex
            KeySchema:
              - AttributeName: fromPlayerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ToPlayerIndex
            KeySchema:
              - AttributeName: toPlayerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

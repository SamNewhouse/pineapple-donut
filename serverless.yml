service: pineapple-donut

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_PLAYERS: Players
    DYNAMODB_ITEMS: Items
    DYNAMODB_ITEMCATALOG: ItemCatalog
    DYNAMODB_TRADES: Trades
    JWT_SECRET: ${env:JWT_SECRET, 'dev-secret-change-in-production'}
    DYNAMODB_ENDPOINT: ${env:DYNAMODB_ENDPOINT, ''}
    STAGE: ${self:provider.stage}

package:
  patterns:
    - "!src/scripts/**"

plugins:
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:
  # Player Management
  player--get:
    handler: src/handlers/auth/players.get
    events:
      - http:
          path: player/{playerId}
          method: get
          cors: true

  player--trades:
    handler: src/handlers/game/trading.getPlayerTrades
    events:
      - http:
          path: player/{playerId}/trades
          method: get
          cors: true

  player--items:
    handler: src/handlers/game/items.getAll
    events:
      - http:
          path: player/{playerId}/items
          method: get
          cors: true

  # Authentication
  auth--signup:
    handler: src/handlers/auth/signup.signup
    events:
      - http:
          path: auth/signup
          method: post
          cors: true

  auth--login:
    handler: src/handlers/auth/login.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  # Game Functions
  scan--process:
    handler: src/handlers/game/scan.processScan
    events:
      - http:
          path: scan/process
          method: post
          cors: true

  # Item Management
  item--get:
    handler: src/handlers/game/items.getItem
    events:
      - http:
          path: item/{itemId}
          method: get
          cors: true

  # Trading System
  trade--get:
    handler: src/handlers/game/trading.getTrade
    events:
      - http:
          path: trade/{tradeId}
          method: get
          cors: true

  trade--create:
    handler: src/handlers/game/trading.createTrade
    events:
      - http:
          path: trade/create
          method: post
          cors: true

  trade--accept:
    handler: src/handlers/game/trading.acceptTrade
    events:
      - http:
          path: trade/{tradeId}/accept
          method: post
          cors: true

  trade--reject:
    handler: src/handlers/game/trading.rejectTrade
    events:
      - http:
          path: trade/{tradeId}/reject
          method: post
          cors: true

  trade--cancel:
    handler: src/handlers/game/trading.cancelTrade
    events:
      - http:
          path: trade/{tradeId}/cancel
          method: post
          cors: true

resources:
  Resources:
    # Item Catalog Table
    ItemCatalogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ItemCatalog
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # Players Table
    PlayersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Players
        AttributeDefinitions:
          - AttributeName: playerId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: playerId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Items Table
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Items
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: playerId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: PlayerIndex
            KeySchema:
              - AttributeName: playerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    #Trades Table
    TradesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Trades
        AttributeDefinitions:
          - AttributeName: tradeId
            AttributeType: S
          - AttributeName: fromPlayerId
            AttributeType: S
          - AttributeName: toPlayerId
            AttributeType: S
        KeySchema:
          - AttributeName: tradeId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: FromPlayerIndex
            KeySchema:
              - AttributeName: fromPlayerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ToPlayerIndex
            KeySchema:
              - AttributeName: toPlayerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
